exports {
    range; xrange; revrange;
    sort; sortn; rsort; rsortn;
    repeat; repeatcb; Matrix; Matrix3d;
    min; max; abs;
    last;
    keys;
    slice;
    or;
    isdigit; isnumber;
    array_compare;
};

let slice = func(a, from, to) {
    let ret = [];
    for i in xrange(from, to) {
        ret += [a.(i)];
    };
    return ret;
};
let last = func(a) => a.(len(a)-1);
let min = func(a,b) => if a < b => a else => b;
let max = func(a,b) => if a > b => a else => b;
let abs = func(x) => if x >= 0 => x else => -x;
let range = func(x) {
    let ret = [];
    let i = 0;
    while i < x {
        ret += [i];
        i += 1;
    };
    return ret;
};
let revrange = func(x) {
    let ret = [];
    let i = x-1;
    while i >= 0 {
        ret += [i];
        i -= 1;
    };
    return ret;
};
let xrange = func(from, to) {
    return for x in range(to-from) => x+from;
};
let sort = func(a, less) {
    if len(a) <= 1 {
        return a;
    };

    let mid = a.(len(a)/2);
    let left = [];
    let right = [];
    let middle = [];

    for x in a {
        let comp = less(x, mid);
        if comp < 0 {
            left += [x];
        } else if comp == 0 {
            middle += [x];
        } else {
            right += [x];
        };
    };

    return sort(left, less)+middle+sort(right, less);
};
let rsort = func(array, less)=>sort(array, func(a, b)=>-less(a, b));
let sortn = func(array)=>sort(array, func(a, b)=>a-b);
let rsortn = func(array)=>sort(array, func(a, b)=>b-a);
let repeat = func(x, cnt) {
    let ret = [];
    for i in range(cnt) {
        ret += [x];
    };
    return ret;
};
let repeatcb = func(cb, cnt) {
    let ret = [];
    for i in range(cnt) {
        ret += [cb()];
    };
    return ret;
};
let Matrix = func (w, h, v) => struct{
    f: repeatcb((func=>repeat(v, w)), h);
    at: func(x, y) => this.f.(y).(x);
    set: func(x, y, v) => this.f.(y).(x) = v;
};
let Matrix3d = func (w, h, d, v) => struct{
    f: repeatcb((func=>repeatcb((func=>repeat(v, w)), h)), d);
    at: func(x, y, z) => this.f.(z).(y).(x);
    set: func(x, y, z, v) => this.f.(z).(y).(x) = v;
};
let keys = func(m) => for k, v in m => k;
let or = func(m, key, default) => if has(m, key) => m.(key) else => default;
let isdigit = func(x) => has(map{"0": true; "1": true; "2": true; "3": true; "4": true; "5": true; "6": true; "7": true; "8": true; "9": true; }, x);
let isnumber = func(x) => type(x) == "number";
let array_compare = func(a, b) {
    if len(a) != len(b) {
        return false;
    };
    for i in range(len(a)) {
        if a.(i) != b.(i) {
            return false;
        };
    };

    return true;
};